name: "Release Workflow: (create repo release, docker images and go packages)"

on:
  workflow_dispatch:
    inputs:
      release_version:
        type: string
        description: release version when building docker containers (example; 2.0.0)

run-name: >-
  ${{ format('Release {0}', github.event.inputs.release_version) }}

jobs:
  version_info:
    name: "Version Info"
    runs-on: ubuntu-latest
    steps:
      - name: Check release version inputs
        run: |
          # regex obtained from: https://stackoverflow.com/a/50529645
          SEMVER_REGEX="^(0|[1-9][0-9]*)\\.(0|[1-9][0-9]*)\\.(0|[1-9][0-9]*)(\\-[0-9A-Za-z-]+(\\.[0-9A-Za-z-]+)*)?(\\+[0-9A-Za-z-]+(\\.[0-9A-Za-z-]+)*)?$"
          if [[ ${{ github.event.inputs.release_version }} =~ $SEMVER_REGEX ]]; then
              echo "match=true" >> $GITHUB_OUTPUT
          else
              echo "Aborting action, invalid version input. Got: ${{ github.event.inputs.release_version }}"
              exit 1
          fi
      - name: Change MAJOR_VERSION env variable
        run: |
          major=`echo ${{ github.event.inputs.release_version }} | cut -d. -f1`
          echo "MAJOR_VERSION=$major" >> "$GITHUB_ENV"
      - name: Change RELEASE_VERSION env variable
        run: echo "RELEASE_VERSION=${{ github.event.inputs.release_version }}" >> "$GITHUB_ENV"
      - name: Change RELEASE_VERSION_WITH_V env variable
        run: echo "RELEASE_VERSION_WITH_V=v${{ github.event.inputs.release_version }}" >> "$GITHUB_ENV"
      - name: Print Info
        run: |
          echo "MAJOR_VERSION          = $MAJOR_VERSION"
          echo "RELEASE_VERSION        = $RELEASE_VERSION"
          echo "RELEASE_VERSION_WITH_V = $RELEASE_VERSION_WITH_V"
    outputs:
      major_version: ${{ env.MAJOR_VERSION }}
      release_version: ${{ env.RELEASE_VERSION }}
      release_version_with_v: ${{ env.RELEASE_VERSION_WITH_V }}
 
  change_logs:
    runs-on: ubuntu-latest
    needs: version_info
    # if: always()
    container: quay.io/git-chglog/git-chglog:0.15.0
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install main dependencies
        run: |
          apk add bash git grep yq
          
      - name: Generate charts changelog files
        shell: bash
        run: |
          set -x

          #
          # Generate chart CHANGELOG.md file.
          git-chglog                                                  \
              --output "CHANGELOG.md"                                 \
              --no-case                                               \
              --next-tag "${{ github.event.inputs.release_version }}" 

          #
          # Generate RELEASE-NOTES.md file.
          git-chglog                                                  \
              --no-case                                               \
              --output "RELEASE-NOTES.md"                                 \
              --next-tag "${{ github.event.inputs.release_version }}" \
              "${{ github.event.inputs.release_version }}"

      - name: Commit charts Chart.yaml, CHANGELOG.md and RELEASE-NOTES.md file 
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

          # Commit changes locally.
          git add ${chart_path}/CHANGELOG.md
          git add ${chart_path}/RELEASE-NOTES.md
          git commit -m "Update CHANGELOG and RELEASE-NOTES"

          # Push changes to branch.          
          git push origin $GITHUB_REF_NAME

  create_tag:
    name: Create Tag
    needs: [change_logs]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main
      - name: Create Tag
        run: |
          git config user.name "Lamassu IoT Bot"
          git config user.email "lamassuiot@lamassu.io"
          git tag ${{ needs.version_info.outputs.release_version_with_v }} -m "Release ${{ needs.version_info.outputs.release_version_with_v }}"
          git push origin ${{ needs.version_info.outputs.release_version_with_v }}

  create_release:
    name: Create Release
    needs: [create_tag, version_info]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.version_info.outputs.release_version_with_v }}
      - name: Create Github Release
        uses: actions/create-release@v1
        id: create_release
        with:
          draft: false
          prerelease: false
          release_name: ${{ needs.version_info.outputs.release_version_with_v }}
          tag_name: ${{ needs.version_info.outputs.release_version_with_v }}
          body_path: RELEASE-NOTES.md
        env:
          GITHUB_TOKEN: ${{ github.token }}
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '^1.20.0' # The Go version to download (if necessary) and use.
      - name: Build release assets # This would actually build your project, using zip for an example artifact
        run: |
          go mod vendor
          zip -r vendor.zip vendor
      - name: Upload vendor dependencies
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./vendor.zip
          asset_name: vendor.zip
          asset_content_type: application/zip

  create_gopkg_release:
    name: "Create Go package release"
    needs: [create_tag, version_info]
    runs-on: ubuntu-latest
    environment: release
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: v${{ needs.version_info.outputs.major_version }}
          token: ${{ secrets.PAT_RELEASER }}
          fetch-tags: true
      - run: |
          git config user.name "Lamassu IoT Bot"
          git config user.email "lamassuiot@lamassu.io"
          git fetch --unshallow
          git merge origin/main -m "publishing ${{ needs.version_info.outputs.release_version_with_v }} version"
          git push

  build_docker_image:
    needs: [create_tag, version_info]
    strategy:
      matrix:
        service: [ca, devmanager, dmsmanager, va, alerts, aws-connector]
    name: ${{ matrix.service }} - Release docker images
    runs-on: ubuntu-latest
    environment: release
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.version_info.outputs.release_version_with_v }}
          fetch-tags: true
      - run: |
          echo "SHA1VER=$(git rev-parse HEAD)" >> $GITHUB_ENV
      - name: Login to Github Registry
        uses: docker/login-action@v3 
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build ${{ matrix.service }} DEV docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ci/${{ matrix.service }}.dockerfile
          build-args: |
            BASE_IMAGE=alpine:3.14
            SHA1VER=${{ env.SHA1VER }}
            VERSION=${{ needs.version_info.outputs.release_version }}
          tags: |
            ghcr.io/lamassuiot/lamassu-${{ matrix.service }}:${{ needs.version_info.outputs.release_version }}
            ghcr.io/lamassuiot/lamassu-${{ matrix.service }}:latest
          push: true
