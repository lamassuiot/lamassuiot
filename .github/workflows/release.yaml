# name: Release Workflow

# on:
#   push:
#     branches:
#       - release

# jobs:
#   unit_testing_ca:
#     name: CA Unit Testing
#     uses: ./.github/workflows/ca-develop.yaml

#   unit_testing_dms_manager:
#     name: DMS Manager Unit Testing
#     uses: ./.github/workflows/dms-manager-develop.yaml

#   unit_testing_device_manager:
#     name: DeviceManager Unit Testing
#     uses: ./.github/workflows/device-manager-develop.yaml
    
#   build_dev_docker_image:
#     strategy:
#       matrix:
#         service: [ca, device-manager, dms-manager, ocsp, alerts, cloud-proxy, db]
#     name: ${{ matrix.service }} - Release DEV docker images
#     needs:
#       - unit_testing_ca
#       - unit_testing_dms_manager
#       - unit_testing_device_manager
#       # runs-on: self-hosted
#     runs-on: ubuntu-latest
#     steps:
#       - name: Login to Github Registry
#         uses: docker/login-action@v1 
#         with:
#           registry: ghcr.io
#           username: ${{ github.actor }}
#           password: ${{ secrets.GITHUB_TOKEN }}

#       - name: Build ${{ matrix.service }} DEV docker image
#         uses: docker/build-push-action@v2
#         with:
#           file: ci/${{ matrix.service }}.dockerfile
#           build-args: |
#             BASE_IMAGE=alpine:3.14
#           tags: |
#             ghcr.io/lamassuiot/lamassu-${{ matrix.service }}:${{ github.sha }}
#             ghcr.io/lamassuiot/lamassu-${{ matrix.service }}:dev
#           push: true

#   create_dev_server_env:
#     name: Create DEV Server
#     needs:
#     - build_ca_dev_docker_image
#     - build_cloud_proxy_dev_docker_image
#     - build_alerts_dev_docker_image
#     - build_device_manager_dev_docker_image
#     - build_dms_manager_dev_docker_image
#     - build_ocsp_dev_docker_image
#     - build_lamassu_db_dev_docker_image
#     runs-on: ubuntu-latest
#     environment: release
#     permissions:
#       id-token: write
#     outputs:
#       server-ip: ${{ steps.get-server-ip.outputs.ip }}
#     steps:
#     - name: Checkout
#       uses: actions/checkout@v2

#     - name: Configure AWS credentials
#       uses: aws-actions/configure-aws-credentials@v1
#       with:
#         # role-to-assume: arn:aws:iam::345876576284:role/LamassuGHActions
#         # role-session-name: ghactionsrolesession
#         # role-skip-session-tagging: true
#         # role-duration-seconds: 3600 #1hour
#         aws-region: eu-west-1
#         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

#     - name: Install node
#       uses: actions/setup-node@v3
#       with:
#         node-version: 16.4.1
    
#     - name: Install dependencies
#       working-directory: .github/infrastructure/tests/e2e
#       run: npm i && npm i -g cdk

#     - name: CDK synth
#       working-directory: .github/infrastructure/tests/e2e
#       run: cdk synth

#     - name: CDK deploy
#       working-directory: .github/infrastructure/tests/e2e
#       run: cdk deploy --require-approval never --json --outputs-file cdk-outputs.json

#     - id: get-server-ip
#       name: Get EC2 IP
#       working-directory: .github/infrastructure/tests/e2e
#       run: |
#         sudo apt-get install -y jq
#         ip=`cat cdk-outputs.json | jq -r .LamassuGHActionsE2EStack.EC2Instanceoutput`
#         echo "::set-output name=ip::$ip"

#   deploy_to_dev_server:
#     name: Deploy lamassu to DEV Server
#     runs-on: ubuntu-latest
#     environment: release
#     needs:
#     - create_dev_server_env
#     steps:
#     - name: Wait for user data completion
#       uses: appleboy/ssh-action@master
#       with:
#         host: ${{ needs.create_dev_server_env.outputs.server-ip }}
#         username: ${{ secrets.AWS_SSH_USERNAME }}
#         key: ${{ secrets.AWS_SSH_KEY }}
#         port: ${{ secrets.AWS_SSH_PORT }}
#         script: |
#           while [ ! -f /tmp/finished-user-data ]; do sleep 2; done

#     - name: Executing remote ssh commands
#       uses: appleboy/ssh-action@master
#       with:
#         host: ${{ needs.create_dev_server_env.outputs.server-ip }}
#         username: ${{ secrets.AWS_SSH_USERNAME }}
#         key: ${{ secrets.AWS_SSH_KEY }}
#         port: ${{ secrets.AWS_SSH_PORT }}
#         script: |
#           curl -fsSL https://raw.githubusercontent.com/lamassuiot/lamassu-compose/develop/lamassu-compose.sh -o lamassu-compose.sh
#           sudo bash lamassu-compose.sh --domain dev.lamassu.io --compose-version develop

#   integration_test:
#     name: Integration test
#     runs-on: ubuntu-latest
#     environment: release
#     needs:
#     - deploy_to_dev_server
#     - create_dev_server_env
#     steps:
#     - name: Run integration tests
#       uses: appleboy/ssh-action@master
#       with:
#         host: ${{ needs.create_dev_server_env.outputs.server-ip }}
#         username: ${{ secrets.AWS_SSH_USERNAME }}
#         key: ${{ secrets.AWS_SSH_KEY }}
#         port: ${{ secrets.AWS_SSH_PORT }}
#         script: |
#           source /etc/profile.d/go.sh
#           cd /home/ubuntu/lamassuiot
#           go install github.com/haveyoudebuggedit/gotestfmt/v2/cmd/gotestfmt@v2.3.1
#           go test -json -v test/e2e/performance_test.go -domain=dev.lamassu.io -cert=/home/ubuntu/lamassu-compose/tls-certificates/downstream/tls.crt | gotestfmt
          
#   ocsp_test:
#     name: OCSP test
#     runs-on: ubuntu-latest
#     environment: release
#     needs:
#     - create_dev_server_env
#     - deploy_to_dev_server
#     steps:
#     - name: Run EST tests with multiple clients (Curl, Globalsign, Lamassu EST Cli)
#       uses: appleboy/ssh-action@master
#       with:
#         host: ${{ needs.create_dev_server_env.outputs.server-ip }}
#         username: ${{ secrets.AWS_SSH_USERNAME }}
#         key: ${{ secrets.AWS_SSH_KEY }}
#         port: ${{ secrets.AWS_SSH_PORT }}
#         script: |
#           source /etc/profile.d/go.sh
#           cd /home/ubuntu/lamassuiot
#           export DOMAIN=dev.lamassu.io
#           sed -i 's/dev\.lamassu\.io/'$DOMAIN'/g' ./test/ocsp/.env
#           go install github.com/haveyoudebuggedit/gotestfmt/v2/cmd/gotestfmt@v2.3.1
#           go test -json -v ./test/ocsp/ocsp_test.go -args -domain=dev.lamassu.io -cert=/home/ubuntu/lamassu-compose/tls-certificates/downstream/tls.crt | gotestfmt

#   est_test:
#     name: EST test
#     runs-on: ubuntu-latest
#     environment: release
#     needs:
#     - create_dev_server_env
#     - deploy_to_dev_server
#     steps:
#     - name: Run EST tests with multiple clients (Curl, Globalsign, Lamassu EST Cli)
#       uses: appleboy/ssh-action@master
#       with:
#         host: ${{ needs.create_dev_server_env.outputs.server-ip }}
#         username: ${{ secrets.AWS_SSH_USERNAME }}
#         key: ${{ secrets.AWS_SSH_KEY }}
#         port: ${{ secrets.AWS_SSH_PORT }}
#         script: |
#           source /etc/profile.d/go.sh
#           cd /home/ubuntu/lamassuiot
#           export DOMAIN=dev.lamassu.io
#           sed -i 's/dev\.lamassu\.io/'$DOMAIN'/g' ./test/est/.env
#           go install github.com/haveyoudebuggedit/gotestfmt/v2/cmd/gotestfmt@v2.3.1
#           go test -json -v ./test/est/est_test.go -args -domain=dev.lamassu.io -cert=/home/ubuntu/lamassu-compose/tls-certificates/downstream/tls.crt | gotestfmt

#   tear_down_test_infra:
#     name: Tear down DEV server
#     runs-on: ubuntu-latest
#     environment: release
#     needs:
#     - integration_test
#     - ocsp_test
#     - est_test
#     if: always()
#     steps:
#     - name: Checkout
#       uses: actions/checkout@v2

#     - name: Configure AWS credentials
#       uses: aws-actions/configure-aws-credentials@v1
#       with:
#         # role-to-assume: arn:aws:iam::345876576284:role/LamassuGHActions
#         # role-session-name: ghactionsrolesession
#         # role-skip-session-tagging: true
#         # role-duration-seconds: 3600 #1hour
#         aws-region: eu-west-1
#         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

#     - name: Install node
#       uses: actions/setup-node@v3
#       with:
#         node-version: 16.4.1
    
#     - name: Install dependencies
#       working-directory: .github/infrastructure/tests/e2e
#       run: npm i &&  npm i -g cdk

#     - name: CDK synth
#       working-directory: .github/infrastructure/tests/e2e
#       run: cdk synth

#     - name: CDK Destroy
#       working-directory: .github/infrastructure/tests/e2e
#       run: cdk destroy -f