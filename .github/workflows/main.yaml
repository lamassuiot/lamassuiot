name: "PROD: Docker Releaser Workflow"

on:
  workflow_dispatch:
    inputs:
      release_version:
        type: string
        description: release version when building docker containers (example; 2.0.0)
env:
  MAJOR_VERSION: ''
  RELEASE_VERSION: ''
  RELEASE_VERSION_WITH_V: ''

jobs:
  print_version:
    name: "Version Info"
    runs-on: ubuntu-latest
    steps:
      - name: Check release version inputs
        run: |
          # regex obtained from: https://semver.org/#is-there-a-suggested-regular-expression-regex-to-check-a-semver-string
          if [[ ${{ github.event.inputs.release_version }} =~ ^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$ ]]; then
              echo "match=true" >> $GITHUB_OUTPUT
          elif
              echo "Aborting action, invalid version input. Got: ${{ github.event.inputs.release_version }}"
              exit 1
          fi
      - name: Change MAJOR_VERSION env variable
        run: |
          major=`echo ${{ github.event.inputs.release_version }} | cut -d. -f1`
          echo "::set-env name=MAJOR_VERSION::$major"
      - name: Change RELEASE_VERSION env variable
        run: echo "::set-env name=RELEASE_VERSION::${{ github.event.inputs.release_version }}"
      - name: Change RELEASE_VERSION_WITH_V env variable
        run: echo "::set-env name=RELEASE_VERSION_WITH_V::v${{ github.event.inputs.release_version }}"
      - name: Print Info
        run: |
          echo "MAJOR_VERSION          = $MAJOR_VERSION"
          echo "RELEASE_VERSION        = $RELEASE_VERSION"
          echo "RELEASE_VERSION_WITH_V = $RELEASE_VERSION_WITH_V"
  create_release:
    name: Create Release
    needs: [print_version]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '^1.20.0' # The Go version to download (if necessary) and use.
      - name: Build release assets # This would actually build your project, using zip for an example artifact
        run: |
          go mod vendor
          zip -r vendor.zip vendor
      - name: Create Github Release
        uses: actions/create-release@v1
        id: create_release
        with:
          draft: false
          prerelease: false
          release_name: $RELEASE_VERSION_WITH_V
          tag_name: $RELEASE_VERSION_WITH_V
          body_path: CHANGELOG.md
        env:
          GITHUB_TOKEN: ${{ github.token }}
      - name: Upload vendor dependencies
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./vendor.zip
          asset_name: vendor.zip
          asset_content_type: application/zip

  create_gopkg_release:
    name: "Create Go package release"
    needs: [print_version]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: $MAJOR_VERSION"
      - run: |
          git merge main
          git commit -m "publishing $RELEASE_VERSION_WITH_V version"
          git push

  build_docker_image:
    needs: [create_release]
    strategy:
      matrix:
        service: [ca, devmanager, dmsmanager, va, alerts, aws-connector]
    name: ${{ matrix.service }} - Release docker images
    runs-on: ubuntu-latest
    steps:
      - name: Login to Github Registry
        uses: docker/login-action@v1 
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build ${{ matrix.service }} DEV docker image
        uses: docker/build-push-action@v2
        with:
          file: ci/${{ matrix.service }}.dockerfile
          build-args: |
            BASE_IMAGE=alpine:3.14
          tags: |
            ghcr.io/lamassuiot/lamassu-${{ matrix.service }}:$RELEASE_VERSION
            ghcr.io/lamassuiot/lamassu-${{ matrix.service }}:latest
          push: true
